[user]
  name = Pascal Weiland
  email = pasweiland@gmail.com
  signingkey = B4EDE7DC

[alias]
  # Shorter commands
  a  = commit --amend
  br = branch
  c  = commit
  d  = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  dc = diff --cached
  #ca = !git add -A && git commit          # commit all changes
  co = checkout
  cm = checkout master
  # Switch to a branch, creating it if necessary
  cb = checkout -B
  g  = log --graph --pretty=custom        # show custom graph
  ll = log --pretty=custom                # show custom log
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  st = status
  s = status -s
  uc = reset --soft HEAD~1                # undo commit
  #conflicts = diff --name-only --diff-filter=U
  conflicts = !git status --short | grep "^UU "
  dsf = "!git diff --color $@ | diff-so-fancy"
  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"
  # Clone a repository including all submodules
  #c = clone --recursive
  # Commit all changes
  ca = !git add -A && git commit -av
  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # open remote
  #open = !hub open

  lastchanges = !"for k in `git branch | sed s/^..//`; do echo `git log -1 --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset\" $k --`\t\"$k\";done | sort"
  recentchanges = !"for k in `git branch | sed s/^..//`; do echo `git log -1 --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset\" $k --`\t\"$k\";done | sort"
  #lastchanges = "!f() { for k in `git branch | perl -pe s/^..//`; do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k -- | head -n 1`\\t$k; done | sort -r}; f"
  #lastchanges = "!f() { for k in `git branch | perl -pe s/^..//`; do echo -e `git show --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset\" $k -- | head -n 1`\\t$k; done | sort -r}; f"
  # Credit an author on the latest commit (implemented below as well)
  #credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"
  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"
  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"
  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
  # Remove branches that have already been merged with master
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
  wip = !git add -u && git commit -m '[WIP] SAVEPOINT'
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  undo = reset HEAD~1 --mixed
  # Credit an author on the latest commit
  credit = "!f() { \
              if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
                  git commit --amend --author \"$1 <$2>\" -C HEAD; \
              fi \
            }; f"
  # Merge GitHub pull request on top of the `master` branch
  mpr = "!f() { \
            if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
              git fetch origin refs/pull/$1/head:pr/$1 && \
              git rebase master pr/$1 && \
              git checkout master && \
              git merge pr/$1 && \
              git branch -D pr/$1 && \
              git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
            fi \
          }; f"

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[color]
  ui = auto

[color "branch"]
  current = green bold
  local = green
  remote = yellow

[color "diff"]
  frag = magenta
  meta = yellow
  new = green
  old = red

[color "status"]
  added = green reverse
  changed = yellow reverse
  untracked = red reverse

#[commit]
# template = ~/.gitmessage

# core git settings
[core]
  attributesfile = ~/.gitattributes
  autocrlf = input
  editor = vim
  trustctime = false
  excludesfile = ~/.gitignore_global
  whitespace = nowarn
  #whitespace = space-before-tab,-indent-with-non-tab,trailing-space
  # Real path: /usr/local/Cellar/git/2.12.2/share/git-core/contrib/diff-highlight/diff-highlight
  pager = /usr/local/share/git-core/contrib/diff-highlight/diff-highlight | less

[interactive]
  diffFilter = /usr/local/share/git-core/contrib/diff-highlight/diff-highlight

[color "diff-highlight"]
  oldNormal = red
  oldHighlight = red bold 52
  newNormal = green
  newHighlight = green bold 22

[pretty]
  custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
  #                     │        │            │            │  author name ┘
  #                     │        │            │            └─ message
  #                     │        │            └─ date (relative)
  #                     │        └─ decorations (branch, heads or tags)
  #                     └─ hash (abbreviated)

# git remotes settings
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"

[url "git@heroku.com:"]
  insteadOf = "heroku:"

[url "ssh://git@github.com/"]
  insteadOf = https://github.com/

[credential]
  helper = osxkeychain

[push]
  default = matching

[remote "origin"]
  push = HEAD
  prune = true

# git merge
[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  tool = code
  conflictstyle = diff3
  #conflictstyle = diff3

[mergetool "sourcetree"]
  cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true

[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustexitcode = true

[mergetool]
  prompt = false

# git diff
[diff]
  tool = Kaleidoscope
  colorMoved = zebra

[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path =

[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[difftool]
  prompt = false

# Git init Templates
#[init]
#templatedir = ~/.git_templates

[rerere]
  enabled = 1

[status]
  showUntrackedFiles = all
