#!/usr/bin/env -S deno run --allow-run --allow-read --allow-write --allow-net --allow-env

import { existsSync } from "https://deno.land/std/fs/mod.ts"; // or 'node:fs'
import { resolve } from "https://deno.land/std/path/mod.ts"; // or 'node:path'
import enquirer from 'npm:enquirer';

const prompt = enquirer.prompt;
const createSync = Deno.createSync;
const readFileSync = Deno.readFileSync;
const writeFileSync = Deno.writeFileSync;
const readDirSync = Deno.readDirSync;
const mkdir = Deno.mkdir;
const args = Deno.args;
// const dirname = new URL('.', import.meta.url).pathname; // __dirname in node

export const copy = async (text) => {
  const p = Deno.run({
    cmd: ['pbcopy'],
    stdin: 'piped',
  });
  await p.stdin.write(new TextEncoder().encode(text));
  p.stdin.close();
  await p.status();
  console.debug(text, 'was copied.')
};

export const startEditor = async (path) => {
  const p = Deno.run({
    cmd: ['nvim', path],
    stdin: 'inherit',
    stderr: 'inherit',
    stdout: 'inherit',
  });
  const status  = await p.status()
  console.log('close', p.close());

  console.log({status})
};

const TIL_DIR = '/Users/pw/src/weiland/til'; // __dirname
const TEMPLATE = resolve(TIL_DIR, 'template.md');

const TOPICS = Array.from(readDirSync(TIL_DIR))
    .filter(({ isDirectory }) => isDirectory)
    .map(({ name }) => name);

const createNoteFromArgs = async (args) => {
  const { topic, title } = await transform(args);
  createNote(topic, title);
};

const transform = async (args) => {
  const titleQuestion = {
    type: 'input',
    name: 'title',
    message: 'Title?',
  };
  const sourceQuestion = {};
  if (args.length === 0) {
    // if no args are provided, we ask for the information
    const { topic, title } = await prompt([{
      type: 'autocomplete',
      name: 'topic',
      message: 'Choose topic',
      limit: 10,
      initial: 1,
      choices: TOPICS
    },
    titleQuestion
    ]);

    return { topic, title };
  }

  // const topic = args.shift(); // extract frist element (topic) and args has now less elements
  const topic = args[0]; // extract frist element (topic) and args has now less elements

  if (args.length === 1) {
    // only topic was provided, so we ask for the title
    const title = await prompt(titleQuestion);
    return { topic, title };
  }

  let title;
  if (args.length > 2) {
    // When there are more elements, the title consist of spaces
    const [_, ...newTitle ] = args;
    // title = newTitle.map(c => c.toLowerCase()).join('-');
    title = newTitle.join(' ');
  } else {
    // we have exactly two args
    title = args[1];
  }

  return { topic, title };
};

const slugify = (title) => title.trim().toLowerCase().replace(/\ /g, '-');

const createNote = (topic, title) => {
  ensureTopicDirectory(topic);
  const sanitizedTitle = slugify(title);
  const filename = `${sanitizedTitle}.md`;
  const filePath = resolve(TIL_DIR, topic, filename);
  if (existsSync(filePath)) {
    console.warn('There is already a %s note with the title `%s`.', topic, title);
  } else {
    console.log('create note', topic, title);
    const decoder = new TextDecoder("utf-8");
    const template = Deno.readFileSync(TEMPLATE);
    const text = `# ${title}

${decoder.decode(template)}
`;
    const writeEncoder = new TextEncoder();
    const data = writeEncoder.encode(text);
    writeFileSync(filePath, data);
  }

  const command = `nvim ${filePath}`;
  // copy(command).then(() => console.log('copied')).catch((e) => console.error('er', e));
  startEditor(filePath).then(() => console.log('editor closed')).catch((e) => console.error('er', e));

};

const ensureTopicDirectory = (topicRaw) => {
  const topic = topicRaw.trim().toLowerCase();
  const directory = resolve(TIL_DIR, topic);
  if (existsSync(directory)) {
    return true;
  }
  mkdir(directory);
};

createNoteFromArgs(args)
